# -*- coding: utf-8 -*-
"""Facial_expression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jPAfdA84Y-3W19qYme-f2gGJasg_BVk-

**Importing 
Libraries**
"""

import pandas as pd
import matplotlib.pyplot as plt
import cv2
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras import utils
from tensorflow.keras import layers
from tensorflow import keras

"""**Loading Dataframe**


[Kaggle Data Set](https://www.kaggle.com/deadskull7/fer2013) Click to see
"""

df = pd.read_csv('/content/drive/My Drive/fer2013/fer2013.csv')

ker

new_df = []
new_df.append(str(df['pixels'][0]).split(" "))
new_df
df.head(20)

df['Usage'].unique()

new_df.append(str(df['pixels'][2]).split(" "))
len(new_df)

pd.DataFrame(new_df)

df['emotion'].unique()

"""**Pre-Processing**"""

images_data = []
max_len = 0
for i in range(df.shape[0]):
  k=df['pixels'][i].split(" ")
  k=[int(x) for x in k]
  images_data.append(k)
  t=len(images_data[i])
  if t>max_len:
    max_len=t
print(max_len)
images_df = pd.DataFrame(images_data)

images_df['class'] = df['emotion']

images_df.head()

temp = np.array(images_df.iloc[15,:2304]).reshape(48,48)

plt.imshow(temp)

'''for i in range(10):
  temp = np.array(images_df.iloc[i,:2304]).reshape(48,48)
  plt.imshow(temp)
  plt.show()'''

from sklearn.model_selection import train_test_split


X = images_df.drop(['class'],axis=1)/255.0
y=images_df['class']
xtrval ,xts,ytrval,yts = train_test_split(X,y,test_size=0.2,random_state= 2)

yts.shape

xtr,xval,ytr,yval = train_test_split(xtrval,ytrval,test_size=0.2,random_state= 2)



"""**Creating Model**"""

model = Sequential()

model.add(layers.Conv2D(filters=32,kernel_size = (2,2),input_shape=(48,48,1)))
model.add(layers.MaxPool2D((2,2)))

model.add(layers.Conv2D(filters=64,kernel_size = (2,2),input_shape=(48,48,1)))
model.add(layers.MaxPool2D((2,2)))

model.add(layers.Conv2D(filters=128,kernel_size = (2,2),input_shape=(48,48,1)))

model.add(layers.MaxPool2D((2,2)))
model.add(layers.Conv2D(filters=256,kernel_size = (2,2),input_shape=(48,48,1)))

model.add(layers.MaxPool2D((2,2)))


model.add(layers.Flatten())

model.add(layers.Dense(1000,activation='relu'))
model.add(layers.Dense(1000,activation='relu'))

model.add(layers.Dense(500,activation='relu'))
model.add(layers.Dense(200,activation='relu'))
model.add(layers.Dense(200,activation='relu'))

model.add(layers.Dense(200,activation='relu'))

model.add(layers.Dense(7,activation='softmax'))

model.summary()

xtr=np.array(xtr).reshape(22967,48,48,1)
xval= np.array(xval).reshape(5742,48,48,1)
yval=np.array(yval).reshape(5742,)
ytr=np.array(ytr).reshape(22967,)

print(xval.shape)
print(yval.shape)
print(xtr.shape)
print(ytr.shape)



"""**Compiling - Model Training**"""

model.compile(loss='SparseCategoricalCrossentropy',optimizer='adam',metrics=['accuracy'])

best = keras.callbacks.ModelCheckpoint('model.h5',best_model_only = True)
early_stop = keras.callbacks.EarlyStopping(patience=15,
                                                  restore_best_weights=True)

model_hist = model.fit(xtr,ytr,epochs=200,validation_data=(xval,yval),callbacks = [best,early_stop])

pd.DataFrame(model_hist.history).plot(figsize=(20,15))

#Save Model in h5 file

model.save("model.h5")

# Load Model from that file

model = keras.models.load_model('model.h5')



face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

img = cv2.imread('/content/anger.jpg',0)
faces = face_cascade.detectMultiScale(img, 1.3, 5)
faces
x1=faces[0][0]
y1=faces[0][1]
x2=x1+faces[0][2]
y2=y1+faces[0][3]

x=cv2.imread('/content/e.jpg',0)

plt.imshow(x)

y=cv2.resize(img[y1:y2,x1:x2],(48,48))

plt.imshow(y)

#y.resize(48,48)
y.shape

y=y.reshape(1,48,48,1)

k = model.predict_classes(y)

k[0]

l = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

l[k[0]]

